const crypto = require("crypto")
const base64url = require("base64url")
const cbor = require("cbor")

function parseAttestationObject(attestationObject) {
  const attestationObjectBuffer = base64url.toBuffer(attestationObject)
  return cbor.decodeAllSync(attestationObjectBuffer)[0]
}

function hash(data) {
  return crypto.createHash("sha256").update(data).digest()
}

function verifySignature(signature, data, publicKey) {
  return crypto.createVerify("SHA256").update(data).verify(publicKey, signature)
}

function parseGetAssertAuthData(buffer) {
  const rpIdHash = buffer.slice(0, 32)
  buffer = buffer.slice(32)

  const flagsBuf = buffer.slice(0, 1)
  buffer = buffer.slice(1)

  const flags = flagsBuf[0]

  const counterBuf = buffer.slice(0, 4)
  buffer = buffer.slice(4)

  const counter = counterBuf.readUInt32BE(0)
  console.log(
    "rpIdHash:",
    rpIdHash,
    "flagsBuf:",
    flagsBuf,
    "flags:",
    flags,
    "counter:",
    counter,
    "counterBuf:",
    counterBuf
  )

  return { rpIdHash, flagsBuf, flags, counter, counterBuf }
}

function parseMakeCredAuthData(buffer) {
  const rpIdHash = buffer.slice(0, 32)
  buffer = buffer.slice(32)

  const flagsBuf = buffer.slice(0, 1)
  buffer = buffer.slice(1)

  const flags = flagsBuf[0]

  const counterBuf = buffer.slice(0, 4)
  buffer = buffer.slice(4)

  const counter = counterBuf.readUInt32BE(0)
  console.log("COUNTER: ", counter)

  const aaguid = buffer.slice(0, 16)
  buffer = buffer.slice(16)

  const credIDLenBuf = buffer.slice(0, 2)
  buffer = buffer.slice(2)

  const credIDLen = credIDLenBuf.readUInt16BE(0)

  const credID = buffer.slice(0, credIDLen)
  buffer = buffer.slice(credIDLen)

  const COSEPublicKey = buffer

  return {
    rpIdHash,
    flagsBuf,
    flags,
    counter,
    counterBuf,
    aaguid,
    credID,
    COSEPublicKey,
  }
}

function COSEECDHAtoPKCS(COSEPublicKey) {
  const coseStruct = cbor.decodeAllSync(COSEPublicKey)[0]
  const tag = Buffer.from([0x04])
  const x = coseStruct.get(-2)
  const y = coseStruct.get(-3)

  return Buffer.concat([tag, x, y])
}

function ASN1toPEM(pkBuffer) {
  let type
  if (pkBuffer.length === 65 && pkBuffer[0] === 0x04) {
    pkBuffer = Buffer.concat([
      new Buffer.from(
        "3059301306072a8648ce3d020106082a8648ce3d030107034200",
        "hex"
      ),
      pkBuffer,
    ])

    type = "PUBLIC KEY"
  } else {
    type = "CERTIFICATE"
  }

  const b64cert = pkBuffer.toString("base64")

  let PEMKey = ""
  for (let i = 0; i < Math.ceil(b64cert.length / 64); i++) {
    const start = 64 * i
    PEMKey += b64cert.substr(start, 64) + "\n"
  }

  PEMKey = `-----BEGIN ${type}-----\n` + PEMKey + `-----END ${type}-----\n`
  return PEMKey
}

/**
 * This function throws! Otherwise, returns new counter number.
 * @param counter {Number} The previous counter number.
 * @param attestationObject {String} The value sent to the server when user was setting up the fingerprint scanner.
 * @param clientDataJSON {String} The data from the assertion object generated by the browser during re-login.
 * @param authenticatorData {String} The data from the assertion object generated by the browser during re-login.
 * @param signature {String} The signature we must verify.
 * @throws
 * @return {Number} The assertion counter as seen in the authenticatorData
 */
function verifyAssertion({
  counter,
  attestationObject,
  clientDataJSON,
  authenticatorData,
  signature,
}) {
  const authenticatorDataBuff = base64url.toBuffer(authenticatorData)
  const authrDataStruct = parseGetAssertAuthData(authenticatorDataBuff)

  if (!(authrDataStruct.flags & 0x01)) {
    throw new Error("User was not presented during authentication!")
  }
  if (authrDataStruct.counter <= counter) {
    throw new Error("Counter didn't increase")
  }

  const clientDataHash = hash(base64url.toBuffer(clientDataJSON))
  const signatureBase = Buffer.concat([authenticatorDataBuff, clientDataHash])
  const makeCredResp = parseAttestationObject(attestationObject)
  const { COSEPublicKey } = parseMakeCredAuthData(makeCredResp.authData) || {}
  const publicKey = ASN1toPEM(
    base64url.toBuffer(base64url.encode(COSEECDHAtoPKCS(COSEPublicKey)))
  )
  const signatureBuff = base64url.toBuffer(signature)

  // This line throws.
  verifySignature(signatureBuff, signatureBase, publicKey)

  // Save this new counter to the database now.
  return authrDataStruct.counter
}

const verificationObjects = require("../store/verificationObjects.json")

const verify = {
  counter: 0,
  attestationObject:
    "o2NmbXRlYXBwbGVnYXR0U3RtdKFjeDVjglkCRzCCAkMwggHJoAMCAQICBgGAURekYzAKBggqhkjOPQQDAjBIMRwwGgYDVQQDDBNBcHBsZSBXZWJBdXRobiBDQSAxMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMB4XDTIyMDQyMTExNDU0NVoXDTIyMDQyNDExNDU0NVowgZExSTBHBgNVBAMMQDdiMGZkZTViZDdiNjU1N2Y2ZTZhNjg3YmRjYWQxZmVkYjJkZTVlOTRmZGEwN2U0OGRmOThkMTg0ZjU1Yjk1OTAxGjAYBgNVBAsMEUFBQSBDZXJ0aWZpY2F0aW9uMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEPpvdGeHOWG4TY4f6r3PrS5hZOzI93MBiwZqS0q9FknBhF9rH8WjWxVn2NNV6G54m/PY2D/NwiOkqwl8KInAtGqNVMFMwDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMCBPAwMwYJKoZIhvdjZAgCBCYwJKEiBCBLkbKVKo61AydWbKek1e7VsBjhZaetZpxNx5CEar5ZfDAKBggqhkjOPQQDAgNoADBlAjEA0CB7DsEWB8bjoQDQlH5cUyFH1VRn8zMpAKz3C/RJu26KUg81W+zWXoDH5agkWeSuAjBsr6n23PJj7Er+f2IKvSWjwvryRAcmsg6RKn/+UKvAeJyCQ6A0/02hnLg0VW2Exj9ZAjgwggI0MIIBuqADAgECAhBWJVOVx6f7QOviKNgmCFO2MAoGCCqGSM49BAMDMEsxHzAdBgNVBAMMFkFwcGxlIFdlYkF1dGhuIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMjAwMzE4MTgzODAxWhcNMzAwMzEzMDAwMDAwWjBIMRwwGgYDVQQDDBNBcHBsZSBXZWJBdXRobiBDQSAxMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEgy6HLyYUkYECJbn1/Na7Y3i19V8/ywRbxzWZNHX9VJBE35v+GSEXZcaaHdoFCzjUUINAGkNPsk0RLVbD4c+/y5iR/sBpYIG++Wy8d8iN3a9Gpa7h3VFbWvqrk76cCyaRo2YwZDASBgNVHRMBAf8ECDAGAQH/AgEAMB8GA1UdIwQYMBaAFCbXZNnFeMJaZ9Gn3msS0Btj8cbXMB0GA1UdDgQWBBTrroLE/6GsW1HUzyRhBQC+Y713iDAOBgNVHQ8BAf8EBAMCAQYwCgYIKoZIzj0EAwMDaAAwZQIxAN2LGjSBpfrZ27TnZXuEHhRMJ7dbh2pBhsKxR1dQM3In7+VURX72SJUMYy5cSD5wwQIwLIpgRNwgH8/lm8NNKTDBSHhR2WDtanXx60rKvjjNJbiX0MgFvvDH94sHpXHG6A4HaGF1dGhEYXRhWJg14sM7cC0WqSUM/DdgxPEp8mNn/1AkJVKRxwcgjq5aNkUAAAAA8kqOcNDT+CwpNzJSPMTeWgAUca2Ge5FDiHz79IFRpoNuKvBrgEGlAQIDJiABIVggPpvdGeHOWG4TY4f6r3PrS5hZOzI93MBiwZqS0q9FknAiWCBhF9rH8WjWxVn2NNV6G54m/PY2D/NwiOkqwl8KInAtGg==",
  clientDataJSON:
    "eyJ0eXBlIjoid2ViYXV0aG4uZ2V0IiwiY2hhbGxlbmdlIjoiY21GdVpHOXRZMmhoYkd4bGJtZGxabkp2YldkbGJtVnlZWFJsVTJWeWRtVnlWbVZ5YVdacFkyRjBhVzl1UTNKbFpGSmxjWFZsYzNRIiwib3JpZ2luIjoiaHR0cHM6Ly9qYWRlLWJyaW9jaGUtN2MzM2ZkLm5ldGxpZnkuYXBwIn0=",
  authenticatorData: "NeLDO3AtFqklDPw3YMTxKfJjZ/9QJCVSkccHII6uWjYFAAAAAA==",
  signature:
    "MEQCIFJuzmsET/732AjCJqz8hj831U4P+67Cb/Afpe4kJyo5AiANyq7x8JiHJa5IWU/C19J46jO/Egnd8xaDrxinPQ4EsQ==",
}

const getVerificationObjects = (req, res) => {
  try {
    const newcounter = verifyAssertion(verify)

    console.log(newcounter)
    res.json(newcounter)
  } catch (err) {
    console.log(err.message)
    res.json({ newcounter: "error" })
  }
}

module.exports = getVerificationObjects
